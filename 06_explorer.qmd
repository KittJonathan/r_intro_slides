# Explorer les données

## 🫵Compléter le script

<br>

Créer une nouvelle section intitulée "Explorer les données"

## ✅Compléter le script

<br>

![](img/r_intro_14a.png){fig-align="center"}

## 🫵Structure des données

<br>

-   Dans l'environnement global, repasser en mode "List"

-   Cliquer sur la flèche à gauche de l'objet `penguins`

-   Cliquer sur l'icône "tableau" à droite sur la ligne de l'objet `penguins` dans l'environnement global

-   La fonction `str()` permet d'afficher la *structure* d'un objet. Dans la console, taper la commande `str(penguins)`

## ✅Structure des données

<br>

![](img/r_intro_14b.png){fig-align="center"}

## ❓La fonction `str()`

<br>

![](img/r_intro_14c.png){fig-align="center"}

## ❓La fonction `str()`

<br>

![](img/r_intro_14d.png){fig-align="center"}

## ❓La fonction `str()`

<br>

![](img/r_intro_14e.png){fig-align="center"}

## ❓La fonction `str()`

<br>

![](img/r_intro_14f.png){fig-align="center"}

## ❓La fonction `str()`

<br>

![](img/r_intro_14g.png){fig-align="center"}

## ❓La fonction `str()`

<br>

![](img/r_intro_14h.png){fig-align="center"}

## ❓La fonction `str()`

<br>

![](img/r_intro_14i.png){fig-align="center"}

## ❓La fonction `str()`

<br>

![](img/r_intro_14j.png){fig-align="center"}

## 🫵Explorer les données

<br>

Dans la console, taper les commandes suivantes.

-   `dim(penguins)`

-   `nrow(penguins)`

-   `ncol(penguins)`

-   `names(penguins)` et `colnames(penguins)`

**Que renvoie chacune des commandes ?**

## ✅Explorer les données

<br>

```{r, include=FALSE}
penguins <- read.csv("penguins.csv")
```

```{r}
# Dimensions du tableau (nb lignes, nb colonnes)
dim(penguins)
```

```{r}
# Nombre de lignes du tableau (observations)
nrow(penguins)
```

```{r}
# Nombre de colonnes du tableau (variables)
ncol(penguins)
```

```{r}
# Noms des variables du tableau
colnames(penguins)  # ou names(penguins)
```

## 🫵Afficher le contenu d'une variable

<br>

Dans la console, taper la commande `penguins$year` (penser à l'auto-complétion).

**Que représentent les nombres entre crochets au début de chaque ligne ?**

## ✅Afficher le contenu d'une variable

<br>

![](img/r_intro_14k.png){fig-align="center"}

::: {.callout-tip appearance="simple"}
Les nombres entre crochets sont les index des valeurs affichées (la 2^ème^ ligne débute avec la 16^ème^ valeur de la variable `year`)
:::

## 🫵Afficher les premiers et les derniers éléments

<br>

Dans la console, taper et exécuter les commandes suivantes :

-   `head(penguins)` et `head(penguins$year)`

-   `tail(penguins)` et `tail(penguins$year)`

**Quelle est la différence entre ces deux fonctions ?**

**Quelle est la différence entre l'utilisation de ces fonctions pour un tableau ou une variable ?**

**Combien d'éléments sont affichés ?**

## ✅Afficher les premiers et les derniers éléments

<br>

![](img/r_intro_14l.png){fig-align="center"}

## ❓Aide d'une fonction

La fonction `help()` permet d'afficher l'aide d'une fonction. Elle s'utilise de la manière suivante : `help(head)` ou `?head`.

L'aide d'une fonction est également accessible en tapant les premières lettres du nom de la fonction et en appuyant sur la touche `Tab` puis la touche `F1`.

![](img/r_intro_14m.png){fig-align="center"}

## ❓Aide d'une fonction

<br>

-   **Description** : ce que fait la fonction

-   **Usage** : comment utiliser la fonction

-   **Arguments** : différentes manières d'utiliser la fonction

-   **Details** : description détaillée de la fonction

-   **Value** : ce que renvoie la fonction

-   **Note** : précisions

-   **Author(s)** : liste des personnes qui ont contribué à l'écriture du code et aux éventuelles modifications et corrections

-   **Examples** : exemples d'utilisation de la fonction (exemples exécutables directement dans RStudio)

## 🫵Aide d'une fonction

<br>

Parcourir rapidement l'aide de la fonction `head()`.

**Comment faire pour afficher les trois première lignes du tableau `penguins` ?**

## ✅Aide d'une fonction

<br>

![](img/r_intro_14n.png){fig-align="center"}

## ✅Aide d'une fonction

<br>

![](img/r_intro_14o.png){fig-align="center"}

## 🫵Les fonctions `attach()` et `detach()`

<br>

La fonction `attach()` permet de faire référence aux variables en utilisant leurs noms, sans avoir besoin d'utiliser la syntaxe `data.frame$variable`.

Dans la console, taper et exécuter les commandes suivantes :

-   `attach(penguins)`

-   `head(year)`

-   `detach(year)`

-   `head(year)`

## ✅Les fonctions `attach()` et `detach()`

<br>

![](img/r_intro_14p.png){fig-align="center"}

## 🫵La fonction `search()`

<br>

La fonction `search()` permet de lister les objets "attachés".

Dans la console, taper et exécuter les commandes suivantes :

-   `search()`

-   `attach(penguins)`

-   `search()`

-   `detach(penguins)`

-   `search()`

**Que remarquez-vous ?**

## ✅La fonction `search()`

<br>

![](img/r_intro_14q.png){fig-align="center"}

## 🫵La fonction `summary()`

<br>

Dans la console, taper et exécuter la commande suivante : `summary(penguins)`

**Que retourne cette commande ?**

**Quelles différences remarquez-vous dans le résultat ?**

## ✅La fonction `summary()`

<br>

![](img/r_intro_14r.png){fig-align="center"}

## ✅La fonction `summary()`

<br>

![](img/r_intro_14s.png){fig-align="center"}

## ✅La fonction `summary()`

<br>

![](img/r_intro_14t.png){fig-align="center"}

## 🫵La fonction `summary()`

<br>

Dans la console, taper et exécuter les commandes suivantes :

-   `summary(penguins$species)`

-   `summary(penguins$body_mass_g)`

**Que renvoient ces deux commandes ?**

## ✅La fonction `summary()`

<br>

![](img/r_intro_14u.png){fig-align="center"}

## 🫵Extraire les valeurs extrêmes

Dans la console, taper et exécuter les commandes suivantes :

-   `min(penguins$body_mass_g)`

-   `max(penguins$body_mass_g)`

**Comparer les résultats avec ceux obtenus à l'aide de la commande `summary(penguins$body_mass_g)`**.

**Parcourir l'aide de la fonction `min()` et modifier les commandes ci-dessus pour tenir compte des données manquantes.**

## ✅Extraire les valeurs extrêmes

<br>

![](img/r_intro_15a.png){fig-align="center"}

```{r}
# Autre possibilité :
range(penguins$body_mass_g, na.rm = TRUE)
```

## 🫵Extraire les statistiques

<br>

Dans la console, taper et exécuter les commandes suivantes :

-   `quantile(penguins$body_mass_g, na.rm = TRUE)`

-   `mean(penguins$body_mass_g, na.rm = TRUE)`

-   `median(penguins$body_mass_g, na.rm = TRUE)`

-   `var(penguins$body_mass_g, na.rm = TRUE)`

-   `sd(penguins$body_mass_g, na.rm = TRUE)`

**Que retournent les fonctions `var()` et `sd()` ?**

## ✅Extraire les statistiques

<br>

```{r}
quantile(penguins$body_mass_g, na.rm = TRUE)
mean(penguins$body_mass_g, na.rm = TRUE)
median(penguins$body_mass_g, na.rm = T)
var(penguins$body_mass_g, na.rm = T)
sd(penguins$body_mass_g, na.rm = T)
```

## 🫵Compter les observations

<br>

Dans la console, taper et exécuter les commandes suivantes :

-   `table(penguins$species)`

-   `table(penguins$species, penguins$island)`

-   `table(penguins$species, penguins$island, penguins$sex)`

**Dans quel ordre les différentes catégories sont-elles affichées ?**

## ✅Compter les observations

<br>

```{r}
table(penguins$species)
```

```{r}
table(penguins$species, penguins$island)
```

## ✅Compter les observations

<br>

![](img/r_intro_14v.png){fig-align="center"}

## 🫵Afficher la sortie d'une assignation

<br>

Dans le script, taper et exécuter la commande suivante :

-   `penguins_count <- table(penguins$species, penguins$island)`

-   `penguins_count`

Pour exécuter une commande et afficher la sortie, entourer la commande par des parenthèses `(` et `)` :

`(penguins_count <- table(penguins$species, penguins$island))`

Dans le script, ne conserver que la commande avec les parenthèses.

## ✅Afficher la sortie d'une assignation

<br>

![](img/r_intro_14w.png){fig-align="center"}

## ⚙️Colorer les parenthèses

<br>

**Tools ▶️ Global Options ▶️ Code ▶️ Display**

![](img/r_intro_14x.png){fig-align="center"}

## 🫵Proportions

<br>

Dans la console, taper et exécuter les commandes suivantes :

-   `prop.table(penguins_count)`

-   `prop.table(penguins_count, margin = 1)`

-   `prop.table(penguins_count, margin = 2)`

**Comment les proportions sont-elles calculées dans chacun des cas ?**

## ✅Proportions

<br>

![](img/r_intro_14y.png){fig-align="center"}

## ✅Proportions

<br>

Les proportions du tableau de contingence peuvent être calculées à l'aide des fonctions `sum()`, `rowSums()` et `colSums()` :

```{r}
#| include: false
penguins_count <- table(penguins$species, penguins$island)
```

```{r}
prop.table(penguins_count, margin = NULL)
penguins_count / sum(penguins_count)
```

## ✅Proportions

<br>

Les proportions du tableau de contingence peuvent être calculées à l'aide des fonctions `sum()`, `rowSums()` et `colSums()` :

```{r}
prop.table(penguins_count, margin = 1)
penguins_count / rowSums(penguins_count)
```

## ✅Proportions

<br>

Les proportions du tableau de contingence peuvent être calculées à l'aide des fonctions `sum()`, `rowSums()` et `colSums()` :

```{r}
prop.table(penguins_count, margin = 2)
penguins_count / colSums(penguins_count)
```

## 🫵Arrondir des valeurs numériques

<br>

Dans la console, taper et exécuter les commandes suivantes :

-   `round(prop.table(penguins_count))`

-   `round(prop.table(penguins_count), digits = 2)`

-   `floor(prop.table(penguins_count))`

-   `ceiling(prop.table(penguins_count))`

**Quelles sont les différences entre ces commandes ?**

## ✅Arrondir des valeurs numériques

<br>

```{r}
#| include: false
penguins_count <- table(penguins$species, penguins$island)
```

```{r}
prop.table(penguins_count)
round(prop.table(penguins_count))
round(prop.table(penguins_count), digits = 2)
```

## ✅Arrondir des valeurs numériques

<br>

```{r}
prop.table(penguins_count)
floor(prop.table(penguins_count))
ceiling(prop.table(penguins_count))
```

## ❓Correspondance "explicite" et "implicite"

<br>

Les arguments d'une fonction peuvent être déclarés par :

-   **correspondance explicite (nom + valeur)**

```{r}
#| eval: false
round(x = prop.table(x = penguins_count), digits = 2)
```

-   **correspondance implicite (valeur)**

```{r}
#| eval: false
round(prop.table(penguins_count), 2)
```

## 🫵Correspondance "explicite" et "implicite"

<br>

Dans la console, taper et exécuter les commandes suivantes :

-   `log(x = 16, base = 2)`

-   `log(x = 16, 2)`

-   `log(16, base = 2)`

-   `log(16, 2)`

-   `log(2, 16)`

**Que remarquez-vous ?**

## ✅Correspondance "explicite" et "implicite"

<br>

```{r}
log(x = 16, base = 2)
log(x = 16, 2)
log(16, base = 2)
log(16, 2)
log(2, 16)
```

::: {.callout-caution appearance="simple"}
Dans une déclaration **implicite**, l'**ordre** des valeurs des arguments est déterminant.
:::

## 🫵Exporter des données

<br>

Dans le script, taper et exécuter la commande suivante :

```{r}
#| eval: false
write.csv(x = penguins_count, 
          file = "04_results/penguins_count.csv")
```

Vérifier que `write.csv()` a bien fonctionné en tapant et en exécutant la commande suivante dans la console :

```{r}
#| eval: false
read.csv(file = "04_results/penguins_count.csv")
```

Pour éviter l'ajout d"un `X` comme titre de la 1^ère^ colonne lors de l'importation, utiliser la commande suivante dans la console :

```{r}
#| eval: false
read.csv(file = "04_results/penguins_count.csv",
         col.names = c("Species", "Biscoe", "Dream", "Torgersen"))
```

## ✅Exporter des données

<br>

![](img/r_intro_14z.png){fig-align="center"}
